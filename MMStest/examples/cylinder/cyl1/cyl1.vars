loadModule:MMStest
{

// Grid file information. Note the strange Lref that came with Ed's grid
// files.
grid_file_info: <file_type=VOG,Lref=2m>

// MMS stuff. Note that the MMS module implicitly assumes that the first
// equation(s) represent continuity (either the whole continuity equation
// for flows with no species transport, or a collection of species continuity
// equations for flows with species transport).
flowOperator: (
// Continuity Equation
// time term
del(rho,t)+
// Inviscid flux term
del(rho*u,x)+del(rho*v,y)+del(rho*w,z),
// x component of momentum equation
// time term
del(rho*u,t)
// inviscid flux term
+del(rho*u*u,x)+del(rho*v*u,y)+del(rho*w*u,z)+del(p,x)
// viscous term
-(del(tau_xx,x)+del(tau_xy,y)+del(tau_xz,z)),
// y component of momentum equation
// time term
del(rho*v,t)+
// inviscid flux term
del(rho*u*v,x)+del(rho*v*v,y)+del(rho*w*v,z)+del(p,y)
// viscous term
-(del(tau_xy,x)+del(tau_yy,y)+del(tau_yz,z)),
// z component of momentum
// time term
del(rho*w,t)+
// inviscid flux term
del(rho*u*w,x)+del(rho*v*w,y)+del(rho*w*w,z)+del(p,z)
// viscous term
-(del(tau_xz,x)+del(tau_yz,y)+del(tau_zz,z))
) ;

// MMS stuff.
operatorDefs: (
// stress tensor
tau_xx = 2*mu*del(u,x),
tau_yy = 2*mu*del(v,y),
tau_zz = 2*mu*del(w,z),
tau_xy = mu*(del(u,y)+del(v,x)),
tau_xz = mu*(del(u,z)+del(w,x)),
tau_yz = mu*(del(w,y)+del(v,z)),
// manufactured solution functions
rho = 1, u = x+y, v = x-y, w=0,
p = -(x*x+4*x*y+y*y)
) ;

// Boundary condition information.
boundary_conditions:
<
 BC_1=incompressibleInlet(rho=1.0,mms),
 BC_2=symmetry,
 BC_3=symmetry
>

// Initial condition
initialCondition: <rho=1.0,v=[0.0,0.0,0.0],p=0.0>

// Flow properties
flowRegime: laminar 
flowCompressibility: incompressible

// Chem-stuff
chemistry_model: air_1s0r 
transport_model: const_viscosity
mu: 1.0e-2 

// Time-stepping (timeIntegrator[Euler,CrankNicholson])
timeIntegrator: BDF
timeStep: 1.0e+30
numTimeSteps: 1001
convergenceTolerance: 1.0e-30
maxIterationsPerTimeStep: 1

// InviscidFlux [FOU,SOU,Roe(compressible only)]
inviscidFlux: SOU

// Gradient limiting.
limiter: none

// Momentum equation options.
momentumEquationOptions: <linearSolver=SGS,relaxationFactor=0.7,maxIterations=5>

// Pressure equation options.
pressureEquationOptions: <linearSolver=SGS,relaxationFactor=0.3,maxIterations=20>

// Printing, plotting and restart parameters.
print_freq: 1000
plot_freq: 1000
plot_modulo: 0
plot_output: mmsMomentXError,mmsMomentYError,mmsMomentSrc
restart_freq: 10000
restart_modulo: 0

}
