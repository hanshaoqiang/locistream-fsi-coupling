//-----------------------------------------------------------------------------
// Description: This file contains some of the basic rules common to all
//   grid movement schemes.
//-----------------------------------------------------------------------------

// Standard library includes.
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib> // for exit function
#include <string>
#include <sstream>
#include <cmath>
#include <vector>
using std::vector ;

// Loci includes.
#include <Loci.h>

// StreamUns includes.
#include "sciTypes.h"

#define BOOST_DISABLE_ASSERTS // assertion disabled                                      
// boost::ublas includes
#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>
#include <boost/multi_array.hpp>

namespace ublas = boost::numeric::ublas ;

// Including the C-Fortran template for the subroutine call to NLAMS	
	extern "C"{
        void pass_(const int *, const int*, const double*, const double*, const double*,
		   						 const int*, const int*,
                   const int*, const int*, const double*,
                   const double*,  const double*,  const double*,  const double*,
                   const int*,  const double*,  const double*,  const double*, 
                   const int*, const double*, const double*, const double*,
                   const double*, const double*, const double*, 
                   const double*, const int*, 
                   const int*, const int*, const int*,
                   const double*, const double*, const double*, const double*,
                   const double*, const double*, const double*, 
                   double*,double*,double*,double*,double*);
	}

// Forward declarations using C linkage to avoid mangling the names of
// the Fortran functions that will be called.
// Idea I: Store the data in LOCI which will be required in CSD solver
// Idea II: Excute CSD solver at each step and kill it after get solution.
// 			Only at t=0: readin the mesh, connectivity, bcs, etc.
// Idea III: for constant time, i.e. n=constant, but for advancing inner iteration, i.e. it=changing, we want to keep the unsteady term (CSD) constant.

// CSDvariables
$include "FSI_CSDvariables.lh"

namespace streamUns {
            
//-----------------------------------------------------------------------------
// Rules to read in the grids

// -- Read in the nodes, connectivity, bc files for CSD------------------------------------------------------------------------------------- 
// Read in the initial CSD nodes: undeformed

$rule blackbox(CSDnodes_ic<-CSDMeshFilename),constraint(FSICoupling),option(disable_threading),
 prelude { 
 	string filename = *$CSDMeshFilename ;
 	int Nb = 0;
	if (Loci::MPI_rank==0) cout << "[I] Reading the CSD mesh" << endl;
	ifstream meshData ;
	meshData.open(filename.c_str(), ios::in) ;
	if (!meshData.is_open()) {
		if (Loci::MPI_rank==0) cerr << "[E] CSD meshfile file " << Nb  << " couldn't be opened" << endl;
		exit(1);
	}
	cout << "[I] ..." << filename << " is successfully opened " << endl;
	
	// initialization
	int counter = 0;
	int tempInt ;
//	vector<double> tempVector(3) ;

	string dumpLine ;
// Count the number of elements
	while (getline(meshData, dumpLine)) 
	{
		counter++;
	}
	
	Nb = counter ;
	
// Resize the CSD nodes
	(*$CSDnodes_ic).resize(Nb,3) ;
	
// Clear the stream and go to the first line
	meshData.clear() ;
	meshData.seekg(0) ;
	
// Create nodes by reading the mesh until EOF found
	for (int i=0; i<Nb; ++i) {
		meshData >> tempInt >> (*$CSDnodes_ic)(i,0) >> (*$CSDnodes_ic)(i,1)>> (*$CSDnodes_ic)(i,2);
	}
	
	if (Loci::MPI_rank==0) cout << "[I] ...Number of CSD nodes: " << Nb << endl;

	meshData.close();
} ;

// Read in the CSD connectivity
$rule blackbox(CSDConnectivity<-CSDConnectivityFilename),constraint(FSICoupling),option(disable_threading),
 prelude { 
	string filename = *$CSDConnectivityFilename ;
	int Ne=0;
	
	//Open file 
	if (Loci::MPI_rank==0) cout << "[I] Reading the CSD connectivity" << endl;
	ifstream connectData ;
	connectData.open(filename.c_str(), ios::in) ;
	if (!connectData.is_open()) {
		if (Loci::MPI_rank==0) cerr << "[E] CSD connectivity file " << filename  << " couldn't be opened" << endl;
		exit(1);
	}
	cout << "[I] ..." << filename << " is successfully opened " << endl;
	
	// initialization
	int counter = 0;
	int tempInt ;
//	vector<int> tempVector(3) ;

	string dumpLine ;
// Count the number of elements
	while (getline(connectData, dumpLine)) counter++ ;
	
	Ne = counter ;
	
// Resize the CSD nodes
	(*$CSDConnectivity).resize(Ne,4) ;
	
// Clear the stream and go to the first line
	connectData.clear() ;
	connectData.seekg(0) ;
	
// Create nodes by reading the mesh until EOF found
	for (int i=0; i<Ne; ++i) {
		connectData >> tempInt >> tempInt >> (*$CSDConnectivity)(i,0) >> (*$CSDConnectivity)(i,1) >> (*$CSDConnectivity)(i,2) ;
	}
		
	if (Loci::MPI_rank==0) cout << "[I] ...Number of CSD elements: " << Ne << endl;

	connectData.close();
}	;


// Read in the CSD BCs
$rule singleton(CSDBCdof,CSDBCZeroConstraint<-CSDBCFilename),constraint(FSICoupling) { 

	string filename = $CSDBCFilename ;
	int Nbc=0;
	//Open file 
	if (Loci::MPI_rank==0) cout << "[I] Reading the CSD boundary conditions" << endl;
	ifstream bcData ;
	bcData.open(filename.c_str(), ios::in) ;
	if (!bcData.is_open()) {
		if (Loci::MPI_rank==0) cerr << "[E] CSD connectivity file " << filename  << " couldn't be opened" << endl;
		exit(1);
	}
	cout << "[I] ..." << filename << " is successfully opened " << endl;
	
	// initialization
	int counter = 0 ;
	int tempInt ;
	real tempReal ;

	string dumpLine ;
// Count the number of elements
	while (getline(bcData, dumpLine)) 
	{
		counter++;
	}
	
	Nbc = counter ;
	
// Resize the CSD nodes
	($CSDBCdof).resize(Nbc) ;
	($CSDBCZeroConstraint).resize(Nbc) ;
	
// Clear the stream and go to the first line
	bcData.clear() ;
	bcData.seekg(0) ;
	
// Create nodes by reading the mesh until EOF found
	for (int i=0; i<Nbc; ++i) {
	bcData >> tempInt >> tempReal ;
	($CSDBCdof)[i] = tempInt ;
	($CSDBCZeroConstraint)[i] = tempReal ;
	}
		
	if (Loci::MPI_rank==0) cout << "[I] ...Number of CSD bcs: " << Nbc<< endl;

	bcData.close();
}

// -- Time advancing for the CSDnodes ----------------------------------------------------------------------------------------------------
// Time Build rule for the CSD nodes
$rule blackbox(CSDnodes{n=0}<-CSDnodes_ic),constraint(FSICoupling),option(disable_threading),
	prelude { 
	(*$CSDnodes{n=0}).resize((*$CSDnodes_ic).size1(),3) ;
	(*$CSDnodes{n=0}) = (*$CSDnodes_ic) ;
} ;

// Iteration Build rule for the CSD nodes
$rule blackbox(CSDnodes_it{n,it=0}<-CSDnodes{n}),constraint(FSICoupling),option(disable_threading),
	prelude { 
	(*$CSDnodes_it{n,it=0}).resize((*$CSDnodes{n}).size1(),3) ;
	(*$CSDnodes_it{n,it=0}) = (*$CSDnodes{n}) ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodes_it{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CSD nodes, note CSDnodes{n,it} is the updated one, see move.cc
$rule blackbox(priority::CSDnodes_it{n,it+1}<-CSDnodes_ic,CSDdisplacementsStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading),
	prelude { 
		if (Loci::MPI_rank==0) cout << "Inside CSDnodes_it{n,it+1} priority in" << endl ;
	(*$CSDnodes_it{n,it+1}) = (*$CSDnodes_ic) + (*$CSDdisplacementsStar{n,it}); // CHECK!!!!
		if (Loci::MPI_rank==0) cout << "Inside CSDnodes_it{n,it+1} priority out" << endl ;
} ;
// Iteration Advance rule for the CSD nodes, note CSDnodes{n,it} is the updated one, see move.cc
$rule blackbox(CSDnodes_it{n,it+1}<-CSDnodes_it{n,it}),constraint(FSICoupling),option(disable_threading),
	prelude { 
	if (Loci::MPI_rank==0) cout << "Inside CSDnodes_it{n,it+1} normal in" << endl ;
	(*$CSDnodes_it{n,it+1}) = (*$CSDnodes_it{n,it}); // CHECK!!!!
	if (Loci::MPI_rank==0) cout << "Inside CSDnodes_it{n,it+1} normal out" << endl ;
} ;

// Iteration Collapse rule for the CSD nodes = Time Advance
$rule blackbox(CSDnodes{n+1}<-CSDnodes_it{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), 
	prelude { 
		if (Loci::MPI_rank==0) cout << "Inside CSDnodes{n+1} normal in" << endl ;
	(*$CSDnodes{n+1}) = (*$CSDnodes_it{n,it})  ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodes{n+1} normal out" << endl ;
} ;

// Time Collapse rule for the CSD nodes
//$rule singleton(solution<-CSDnodes{n}),conditional(timeSteppingFinished{n),constraint(FSICoupling,topCSDnodes,bottomCSDnodes) { 
	// nothing
//}

// -- Time advancing for the CSD nodal generalized displacements  ------------------------------------------------------------------------------------------------
// Initialization rule for the CSDaccelerations
$rule blackbox(CSDnodesDisp_ic<-CSDnodes_ic),constraint(FSICoupling),option(disable_threading),	prelude { 
	(*$CSDnodesDisp_ic).resize(6*(*$CSDnodes_ic).size1(),1) ;
	(*$CSDnodesDisp_ic).clear();
} ;

// Time Build rule for the CSD nodal generalized displacements
$rule blackbox(CSDnodesDisp{n=0}<-CSDnodesDisp_ic),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesDisp{n=0}).resize((*$CSDnodesDisp_ic).size1(),1) ;
	(*$CSDnodesDisp{n=0}) = (*$CSDnodesDisp_ic) ;
} ;

// Iteration Build rule for the CSD nodal generalized displacements
$rule blackbox(CSDnodesDisp{n,it=0}<-CSDnodesDisp{n}),constraint(FSICoupling),option(disable_threading), prelude { 
	if (Loci::MPI_rank==0) cout << "Inside CSDnodesDisp{n,it=0}" << endl;
	(*$CSDnodesDisp{n,it=0}) = (*$CSDnodesDisp{n}) ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodesDisp{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CSD nodal generalized displacements from NLAMS
$rule blackbox(priority::CSDnodesDisp{n,it+1}<-CSDnodesDispStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading), prelude { 
	(*$CSDnodesDisp{n,it+1}) = (*$CSDnodesDispStar{n,it}) ;
} ;
// Iteration Advance rule for the CSD nodal generalized displacements
$rule blackbox(CSDnodesDisp{n,it+1}<-CSDnodesDisp{n,it}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesDisp{n,it+1}) = (*$CSDnodesDisp{n,it}) ;
} ;

// Iteration Collapse rule for the CSD nodal generalized displacements
$rule blackbox(CSDnodesDisp{n+1}<-CSDnodesDisp{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesDisp{n+1}) = (*$CSDnodesDisp{n,it}) ;
} ;


// -- Time advancing for the CSD nodal velocities ----------------------------------------------------------------------------------------------------
// Initialization rule for the CSDdisplacements
$rule blackbox(CSDnodesVel_ic<-CSDnodes_ic),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesVel_ic).resize(6*(*$CSDnodes_ic).size1(),1) ;
	(*$CSDnodesVel_ic).clear() ; // Set all elements to zero
} ;


// Time Build rule for the CSD nodal velocities
$rule blackbox(CSDnodesVel{n=0}<-CSDnodesVel_ic),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesVel{n=0}).resize((*$CSDnodesVel_ic).size1(),1) ;
	(*$CSDnodesVel{n=0}) = (*$CSDnodesVel_ic) ;
} ;

// Iteration Build rule for the CSD nodal velocities
$rule blackbox(CSDnodesVel{n,it=0}<-CSDnodesVel{n}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesVel{n,it=0}).resize((*$CSDnodesVel{n}).size1(),3) ;
	(*$CSDnodesVel{n,it=0}) = *$CSDnodesVel{n} ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodesVel{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CSD nodal velocities from NLAMS
$rule blackbox(priority::CSDnodesVel{n,it+1}<-CSDnodesVelStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading), prelude { 
	(*$CSDnodesVel{n,it+1}) = (*$CSDnodesVelStar{n,it}) ;
} ;
// Iteration Advance rule for the CSD nodal velocities from NLAMS
$rule blackbox(CSDnodesVel{n,it+1}<-CSDnodesVel{n,it}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesVel{n,it+1}) = (*$CSDnodesVel{n,it}) ;
} ;

// Iteration Collapse rule for the CSD nodal velocities
$rule blackbox(CSDnodesVel{n+1}<-CSDnodesVel{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesVel{n+1}) = (*$CSDnodesVel{n,it}) ;
} ;

// -- Time advancing for the CSD nodal accelerations ----------------------------------------------------------------------------------------------------
// Initialization rule for the CSDaccelerations
$rule blackbox(CSDnodesAcc_ic<-CSDnodes_ic),constraint(FSICoupling),option(disable_threading),	prelude { 
	(*$CSDnodesAcc_ic).resize(6*(*$CSDnodes_ic).size1(),1) ;
	(*$CSDnodesAcc_ic).clear() ;
} ;

// Time Build rule for the CSD nodal accelerations
$rule blackbox(CSDnodesAcc{n=0}<-CSDnodesAcc_ic),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesAcc{n=0}).resize((*$CSDnodesAcc_ic).size1(),1) ;
	(*$CSDnodesAcc{n=0}) = (*$CSDnodesAcc_ic) ;
} ;

// Iteration Build rule for the CSD nodal accelerations
$rule blackbox(CSDnodesAcc{n,it=0}<-CSDnodesAcc{n}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesAcc{n,it=0}) = (*$CSDnodesAcc{n}) ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodesAcc{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CSD nodal accelerations from NLAMS
$rule blackbox(priority::CSDnodesAcc{n,it+1}<-CSDnodesAccStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading), prelude { 
	(*$CSDnodesAcc{n,it+1}) = (*$CSDnodesAccStar{n,it}) ;
} ;
// Iteration Advance rule for the CSD nodal accelerations from NLAMS
$rule blackbox(CSDnodesAcc{n,it+1}<-CSDnodesAcc{n,it}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesAcc{n,it+1}) = (*$CSDnodesAcc{n,it}) ;
} ;

// Iteration Collapse rule for the CSD nodal accelerations
$rule blackbox(CSDnodesAcc{n+1}<-CSDnodesAcc{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDnodesAcc{n+1}) = (*$CSDnodesAcc{n,it}) ;
} ;

// -- Time advancing for the CFD2CSD Force Pre----------------------------------------------------------------------------------------------------
// Initialization rule for the CFD2CSD Force Pre
$rule blackbox(CSDForcePre_ic<-CSDnodes_ic),constraint(FSICoupling),option(disable_threading),	prelude { 
	(*$CSDForcePre_ic).resize(6*(*$CSDnodes_ic).size1(),1) ;
	(*$CSDForcePre_ic).clear();
} ;

// Time Build rule for the CFD2CSD Force Pre
$rule blackbox(CSDForcePre{n=0}<-CSDForcePre_ic),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDForcePre{n=0}).resize(6*(*$CSDForcePre_ic).size1(),1) ;
	(*$CSDForcePre{n=0}) = (*$CSDForcePre_ic) ;
} ;

// Iteration Build rule for the CFD2CSD Force Pre
$rule blackbox(CSDForcePre{n,it=0}<-CSDForcePre{n}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDForcePre{n,it=0}) = (*$CSDForcePre{n}) ;
	if (Loci::MPI_rank==0) cout << "Inside CSDForcePre{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CFD2CSD Force Pre from NLAMS
$rule blackbox(priority::CSDForcePre{n,it+1}<-CSDForcePreStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading), prelude { 
	(*$CSDForcePre{n,it+1}) = (*$CSDForcePreStar{n,it}) ;
} ;
// Iteration Advance rule for the CFD2CSD Force Pre
$rule blackbox(CSDForcePre{n,it+1}<-CSDForcePre{n,it}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDForcePre{n,it+1}) = (*$CSDForcePre{n,it}) ;
} ;

// Iteration Collapse rule for the CFD2CSD Force Pre
$rule blackbox(CSDForcePre{n+1}<-CSDForcePre{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), prelude { 
	(*$CSDForcePre{n+1}) = (*$CSDForcePre{n,it}) ;
} ;

// -- Time advancing for the CSD nodal system coordinates ----------------------------------------------------------------------------------------------------
// Initialization rule for the CSD nodal system coordinates
$rule blackbox(CSDnodesSys_ic<-CSDConnectivity),constraint(FSICoupling),option(disable_threading),	prelude { 
	 size_t numEl = (*$CSDConnectivity).size1() ;
	 if (Loci::MPI_rank==0) cout << "ic: numEL=" << numEl << endl;
	 (*$CSDnodesSys_ic).resize(boost::extents[3][3][numEl][3]);
	 //(*$CSDnodesSys_ic).resize(boost::extents[3][3][3][3]);
	 std::fill( (*$CSDnodesSys_ic).origin(), (*$CSDnodesSys_ic).origin() + (*$CSDnodesSys_ic).size(), 0. ); // initialize with zero
	 	} ;

// Time Build rule for the CSD nodal system coordinates
$rule blackbox(CSDnodesSys{n=0}<-CSDnodesSys_ic,CSDConnectivity),constraint(FSICoupling),option(disable_threading), prelude { 
	size_t numEl = (*$CSDConnectivity).size1() ;
	if (Loci::MPI_rank==0) cout << "{n=0} numEL=" << numEl << endl;
	//(*$CSDnodesSys{n=0}).resize(boost::extents[0][0][0][0]) ;
	(*$CSDnodesSys{n=0}).resize(boost::extents[3][3][numEl][3]) ;
	(*$CSDnodesSys{n=0}) = (*$CSDnodesSys_ic) ;
	// std::fill( (*$CSDnodesSys{n=0}).origin(), (*$CSDnodesSys{n=0}).origin() + (*$CSDnodesSys{n=0}).size(), 0. ); // initialize with zero
} ;

// Iteration Build rule for the CSD nodal system coordinates
$rule blackbox(CSDnodesSys{n,it=0}<-CSDnodesSys{n}),constraint(FSICoupling),option(disable_threading), prelude { 
	size_t numEl = (*$CSDnodesSys{n}).shape()[2] ;
	if (Loci::MPI_rank==0) cout << "{n,it=0} numEL=" << numEl << endl;
	(*$CSDnodesSys{n,it=0}).resize(boost::extents[3][3][numEl][3]) ;
	(*$CSDnodesSys{n,it=0}) = (*$CSDnodesSys{n}) ;
	if (Loci::MPI_rank==0) cout << "Inside CSDnodesSys{n,it=0}" << endl;
} ;

// Iteration Advance rule for the CSD nodal system coordinates from NLAMS
$rule blackbox(priority::CSDnodesSys{n,it+1}<-CSDnodesSysStar{n,it}),constraint(FSICoupling),conditional(CFDIterationFinished{n,it-1}),option(disable_threading), prelude { 
	size_t numEl = (*$CSDnodesSysStar{n,it}).shape()[2] ;
	if (Loci::MPI_rank==0) cout << "Star{n,it} numEL=" << numEl << endl;
	(*$CSDnodesSys{n,it+1}).resize(boost::extents[3][3][numEl][3]) ;
	(*$CSDnodesSys{n,it+1}) = (*$CSDnodesSysStar{n,it}) ;
} ;
// Iteration Advance rule for the CSD nodal system coordinates
$rule blackbox(CSDnodesSys{n,it+1}<-CSDnodesSys{n,it}),constraint(FSICoupling),option(disable_threading), prelude { 
	size_t numEl = (*$CSDnodesSys{n,it}).shape()[2] ;
	if (Loci::MPI_rank==0) cout << "{n,it+1} numEL=" << numEl << endl;
	(*$CSDnodesSys{n,it+1}).resize(boost::extents[3][3][numEl][3]) ;
		(*$CSDnodesSys{n,it+1}) = (*$CSDnodesSys{n,it}) ;
} ;

// Iteration Collapse rule for the CSD nodal system coordinates
$rule blackbox(CSDnodesSys{n+1}<-CSDnodesSys{n,it}),conditional(iterationFinished{n,it-1}),constraint(FSICoupling),option(disable_threading), prelude { 
	size_t numEl = (*$CSDnodesSys{n,it}).shape()[2] ;
	if (Loci::MPI_rank==0) cout << "{n+1} numEL=" << numEl << endl;
	(*$CSDnodesSys{n+1}).resize(boost::extents[3][3][numEl][3]) ;
	(*$CSDnodesSys{n+1}) = (*$CSDnodesSys{n,it}) ;
	if (Loci::MPI_rank==0) cout << "inside CSDnodesSys{n+1}" << endl ; 
} ;

// -- Communication with NLAMS -----------------------------------------------------------------------------------------------------

$type CFDIterationFinished param<bool> ;
$type stime param<real> ;

$rule singleton(stime{n,it=0}<-stime{n}) {	
	if (Loci::MPI_rank==0) cout << "inside stime{n,it=0} in" << endl ; 
	$stime{n,it=0}=$stime{n} ;
	if (Loci::MPI_rank==0) cout << "inside stime{n,it=0} out" << endl ; 
}	 

$rule singleton(stime{n,it+1}<-stime{n,it}) {
	$stime{n,it+1}=$stime{n,it} ;
}	 

//$rule singleton(stime{n+1}<-stime{n,it}),conditional(iterationFinished{n,it-1}) {
//	$stime{n+1}=$stime{n,it} ;
//}	 

$type timeStep param<real> ;

$rule blackbox(CSDdisplacementsStar,CSDnodesDispStar,CSDnodesVelStar,CSDnodesAccStar,CSDForcePreStar,CSDnodesSysStar<-
							CSDnodes_ic,CSDnodes,CSDnodesDisp,CSDnodesVel,CSDnodesAcc,CSDForce,CSDForcePre,CSDConnectivity,CSDBCdof,CSDBCZeroConstraint,CSDnodesSys,
							stime,$n,timeStep,
							CSDE1,CSDE2,CSDnu12,CSDnu21,CSDG12,CSDthicknessStructure,CSDrhoStructure,
							CSDintegrationScheme,CSDdelta,CSDswitchStiffening,CSDgenAlphaCoeff,CSDnewmarkGammaCoeff,CSDnewmarkBetaCoeff,CSDdampingCoeff1,CSDdampingCoeff2,
							CSDexcitationType,CSDflappingType,CSDplungingType,
							CSDfrequency,CSDplungeAmplitudeX,CSDplungeAmplitudeY,CSDplungeAmplitudeZ,CSDflappingAmplitudeX,CSDflappingAmplitudeY,CSDflappingAmplitudeZ),
						constraint(FSICoupling,FSINLAMS),option(disable_threading), prelude {
	// call NLAMS
	//communicateWithNLAMS(*CSDdisplacementsStar, ....) ;
	//if (*$CFDIterationFinished) {

	
	// Communicate with NLAMS
	const int CSDNumNodes = (*$CSDnodes_ic).size1() ;
	const int CSDNumElems = (*$CSDConnectivity).size1() ;
	const int CSDNumBC = (*$CSDBCdof).size() ;
	const int CSDAnswerSize = 6 * CSDNumNodes ;
	const int rank = Loci::MPI_rank ;
		
	if (rank==0) cout << "[I] Communicating with NLAMS.. " << endl ;
	if (rank==0) cout << "[I]... CSDNumNodes = " << CSDNumNodes << endl ;	
	if (rank==0) cout << "[I]... CSDNumElems = " << CSDNumElems << endl ;	
	if (rank==0) cout << "[I]... CSDNumBC = " << CSDNumBC << endl ;	
	if (rank==0) cout << "[I]... stime = " << $stime << endl ;	
	if (rank==0) cout << "[I]... current time step number = " << $$n << endl ;	
	if (rank==0) cout << "[I]... timestep = " << $timeStep << endl ;	
	if (rank==0) cout << "[I]... CSDE1 = " << $CSDE1 << endl ;					
	if (rank==0) cout << "[I]... CSDE2 = " << $CSDE2 << endl ;		
	if (rank==0) cout << "[I]... CSDnu12 = " << $CSDnu12 << endl ;		
	if (rank==0) cout << "[I]... CSDnu21 = " << $CSDnu21 << endl ;		
	if (rank==0) cout << "[I]... CSDG12 = " << $CSDG12 << endl ;		
	if (rank==0) cout << "[I]... CSDthicknessStructure = " << $CSDthicknessStructure << endl ;		
	if (rank==0) cout << "[I]... CSDrhoStructure = " << $CSDrhoStructure << endl ;		
	if (rank==0) cout << "[I]... CSDdelta = " << $CSDdelta << endl ;		
	if (rank==0) cout << "[I]... CSDexcitationType = " << $CSDexcitationType << endl ;		
	if (rank==0) cout << "[I]... CSDfrequency = " << $CSDfrequency << endl ;		

	// Initialize
	(*$CSDdisplacementsStar).resize(CSDNumNodes,3) ; (*$CSDdisplacementsStar).clear();
	(*$CSDnodesDispStar).resize(CSDAnswerSize,1) ; (*$CSDnodesDispStar).clear();
	(*$CSDnodesVelStar).resize(CSDAnswerSize,1) ; (*$CSDnodesVelStar).clear();
	(*$CSDnodesAccStar).resize(CSDAnswerSize,1) ; (*$CSDnodesAccStar).clear();
	(*$CSDForcePreStar).resize(CSDAnswerSize,1) ; (*$CSDForcePreStar).clear();
	(*$CSDnodesSysStar).resize(boost::extents[3][3][CSDNumElems][3]);
	
	// Displacements at the previous itfis
	//(CSDdisplacementsOld) = (*$CSDnodes) - (*$CSDnodes_ic) ;
	
	int tempTimeStepNumber = *$$n + 1 ;
	
	/*
  pass_(&rank, &CSDNumNodes, &(*$CSDnodes_ic)(0,0), &(*$CSDnodes_ic)(0,1),&(*$CSDnodes_ic)(0,2), 
  			&CSDNumElems, &(*$CSDConnectivity)(0,0), 
  			&CSDNumBC, &(*$CSDBCdof)[0], &(*$CSDBCZeroConstraint)[0], 
  			&$CSDE1, &$CSDnu12, &$CSDrhoStructure, &$CSDthicknessStructure, 
  			&$CSDintegrationScheme, &$CSDnewmarkBetaCoeff, &$CSDnewmarkGammaCoeff, &$CSDgenAlphaCoeff, 
  			&CSDAnswerSize, &(*$CSDnodesDisp)(0,0), &(*$CSDnodesVel)(0,0), &(*$CSDnodesAcc)(0,0), &(*$CSDForce)(0,0), &(*$CSDForcePre)(0,0), (*$CSDnodesSys).data(),
  			&$timeStep, &tempTimeStepNumber, 
  			&$CSDflappingType, &$CSDexcitationType, &$CSDplungingType, 
  			&$CSDfrequency, &$CSDflappingAmplitudeX, &$CSDplungeAmplitudeY, &$CSDplungeAmplitudeZ, &$CSDplungeAmplitudeX, &$CSDplungeAmplitudeY, &$CSDplungeAmplitudeZ, 
  			&(*$CSDdisplacementsStar)(0,0), &(*$CSDnodesDispStar)(0,0), &(*$CSDnodesVelStar)(0,0), &(*$CSDnodesAccStar)(0,0), (*$CSDnodesSysStar).data() );
  */
  // Updates
  // CSDForce -> CSDForcePre
  (*$CSDForcePreStar) = (*$CSDForce ) ;
  
  if (rank==0) cout << "[I] Communication with NLAMS finished.. " << endl ;
  
  	const double PI = 4.0*atan(1.0) ;
		int Ncsd = (*$CSDnodes_ic).size1() ;
		real alpha_amp = 10.0 ; 
		real T = 1. ; // period in sec
		real alpha = alpha_amp * sin(2.*PI/T * (*$stime)) ;
		(*$CSDdisplacementsStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDdisplacementsStar).clear();
		(*$CSDnodesVelStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDnodesVelStar).clear();
		(*$CSDnodesAccStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDnodesAccStar).clear();
		for(int i=0;i<Ncsd;++i) {
			(*$CSDdisplacementsStar)(i,0) = (*$CSDnodes_ic)(i,0) * ( cos(alpha*PI/180) - 1.) ;
			(*$CSDdisplacementsStar)(i,1) = (*$CSDnodes_ic)(i,0) * ( sin(alpha*PI/180) ) ;
			(*$CSDdisplacementsStar)(i,2) = 0.0 ;
		}
		if (rank==0) cout << "CSDdisplacement:" << (*$stime) << ", alpha = " << alpha << endl ;
		if (rank==0) cout << "CSDnodes_ic: " << (*$CSDnodes_ic) << endl ;
		if (rank==0) cout << "CSDdisplacementsStar: " << (*$CSDdisplacementsStar) << endl ;	//*/
	//}
} ;
//
//$rule blackbox(CSDdisplacementsStar,CSDnodesDispStar,CSDnodesVelStar,CSDnodesAccStar,CSDForcePreStar<-
//							CSDnodes_ic,CSDnodes,CSDnodesDisp,CSDnodesVel,CSDnodesAcc,CSDForce,CSDForcePre,CSDConnectivity,CSDBCdof,CSDBCZeroConstraint,
//							stime,$n,timeStep,
//							CSDE1,CSDE2,CSDnu12,CSDnu21,CSDnu21,CSDnu21,CSDthicknessStructure,CSDrhoStructure,
//							CSDintegrationScheme,CSDdelta,CSDswitchStiffening,CSDgenAlphaCoeff,CSDnewmarkGammaCoeff,CSDnewmarkBetaCoeff,CSDdampingCoeff1,CSDdampingCoeff2,
//							CSDexcitationType,CSDflappingType,CSDplungingType,
//							CSDfrequency,CSDplungeAmplitudeX,CSDplungeAmplitudeY,CSDplungeAmplitudeZ,CSDflappingAmplitudeX,CSDflappingAmplitudeY,CSDflappingAmplitudeZ),
//						constraint(FSICoupling,EULERBEAM),option(disable_threading), prelude {
//	// call NLAMS
//	//communicateWithNLAMS(*CSDdisplacementsStar, ....) ;
//	//if (*$CFDIterationFinished) {
//
//	if (Loci::MPI_rank==0) cout << "[I] Communicating with the Euler-Bernoulli beam solver.. " << endl ;
//	// Communicate with NLAMS
//	int CSDNumNodes = (*$CSDnodes_ic).size1() ;
//	int CSDNumElems = (*$CSDConnectivity).size1() ;
//	int CSDNumBC = (*$CSDBCdof).size() ;
//	int CSDAnswerSize = 6 * CSDNumNodes ;
//	
//	// Initialize
//	(*$CSDdisplacementsStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDdisplacementsStar).clear();
//	(*$CSDnodesDispStar).resize((CSDAnswerSize,1) ; (*$CSDnodesDispStar).clear();
//	(*$CSDnodesVelStar).resize((CSDAnswerSize,1) ; (*$CSDnodesVelStar).clear();
//	(*$CSDnodesAccStar).resize(CSDAnswerSize,1) ; (*$CSDnodesAccStar).clear();
//	(*$CSDForcePreStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDForcePreStar).clear();
//	
//	
//	// Communicate with NLAMS
//	int CSDNumNodes = (*$CSDnodes_ic).size1() ;
//	int CSDNumElems = (*$CSDConnectivity).size1() ;
//	int CSDNumBC = (*$CSDBCdof).size() ;
//	int CSDAnswerSize = 6 * CSDNumNodes ;
//	
//	// Displacements at the previous itfis
//	(CSDdisplacementsOld) = (*$CSDnodes) - (*$CSDnodes_ic) ;
//	
//	// CSDForce -> CSDForcePre
//	(*$CSDForcePreStar) = (*$CSDForce ) ;
//	
//  pass_(&CSDNumNodes, &(*$CSDnodes_ic)(0,0), &(*$CSDnodes_ic)(0,1),&(*$CSDnodes_ic)(0,2), 
//  			&CSDNumElems, &(*$CSDConnectivity)(0,0), 
//  			&CSDNumBC, &(*$CSDBCdof)[0], &(*$CSDBCZeroConstraint)[0], 
//  			&$CSDE1, &$CSDnu12, &$CSDrhoStructure, &$CSDthicknessStructure, 
//  			&$CSDintegrationScheme, &$CSDnewmarkBetaCoeff, &$CSDnewmarkGammaCoeff, &$CSDgenAlphaCoeff, 
//  			&CSDAnswerSize, &(*$CSDnodesDisp)(0,0), &(*$CSDnodesVel)(0,0), &(*$CSDnodesAcc)(0,0), &(*CSDForce)(0,0), &(*CSDForcePre)(0,0), 
//  			&$timeStep, &($$n), 
//  			&$CSDflappingType, &$CSDexcitationType, &$CSDplungingType, 
//  			&$CSDfrequency, &$CSDflappingAmplitudeX, &CSDplungeAmplitudeY, &CSDplungeAmplitudeZ, &$CSDplungeAmplitudeX, &$CSDplungeAmplitudeY, &$CSDplungeAmplitudeZ, 
//  			&$CSDdisplacementsStar(0,0), &(*$CSDnodesDispStar)(0,0), &(*$CSDnodesVelStar)(0,0), &(*$CSDnodesAccStar)(0,0));
//  			
//  		//	const double PI = 4.0*atan(1.0) ;
///*		int Ncsd = (*$CSDnodes_ic).size1() ;
//		real alpha_amp = 10.0 ; 
//		real T = 1. ; // period in sec
//		real alpha = alpha_amp * sin(2.*PI/T * (*$stime)) ;
//		(*$CSDdisplacementsStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDdisplacementsStar).clear();
//		(*$CSDnodesVelStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDnodesVelStar).clear();
//		(*$CSDnodesAccStar).resize((*$CSDnodes_ic).size1(),3) ; (*$CSDnodesAccStar).clear();
//		for(int i=0;i<Ncsd;++i) {
//			(*$CSDdisplacementsStar)(i,0) = (*$CSDnodes_ic)(i,0) * ( cos(alpha*PI/180) - 1.) ;
//			(*$CSDdisplacementsStar)(i,1) = (*$CSDnodes_ic)(i,0) * ( sin(alpha*PI/180) ) ;
//			(*$CSDdisplacementsStar)(i,2) = 0.0 ;
//		}
//		if (Loci::MPI_rank==0) cout << "CSDdisplacement:" << (*$stime) << ", alpha = " << alpha << endl ;
//		if (Loci::MPI_rank==0) cout << "CSDnodes_ic: " << (*$CSDnodes_ic) << endl ;
//		if (Loci::MPI_rank==0) cout << "CSDdisplacementsStar: " << (*$CSDdisplacementsStar) << endl ;	*/
//	//}
//} ;

// -- itfsi --
$rule singleton(itfsi_ic),constraint(UNIVERSE) {
	$itfsi_ic = 0 ;
}

$rule singleton(itfsi{n=0}<-itfsi_ic) {
	$itfsi{n=0}=$itfsi_ic ;
}

$rule singleton(itfsi{n,it=0}<-itfsi{n}),option(disable_threading) {
	if (Loci::MPI_rank==0) cout << "inside itfsi{n,it=0} in" << endl ;
	$itfsi{n,it=0}=$itfsi{n} ;
	if (Loci::MPI_rank==0) cout << "inside itfsi{n,it=0} out" << endl ; 
}

$rule singleton(itfsi{n,it+1}<-itfsi{n,it},CFDIterationFinished{n,it}),option(disable_threading) { // only increase if CFD converged
	if ($CFDIterationFinished{n,it}) {
		$itfsi{n,it+1} = $itfsi{n,it} + 1 ;
		//$CFDIterationFinished{n,it} = false ;
	} else {
		$itfsi{n,it+1} = $itfsi{n,it} ;
	}
}

$rule singleton(itfsi{n+1}),conditional(iterationFinished{n,it-1}),option(disable_threading) {
	
	if (Loci::MPI_rank==0) cout << "inside itfsi{n+1} in" << endl ;
	$itfsi{n+1} = 0 ;
	if (Loci::MPI_rank==0) cout << "inside itfsi{n+1} out" << endl ;
	
}



}
