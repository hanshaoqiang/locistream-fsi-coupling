#include <Loci>
#include <sciTypes_base.h>
$include "FVM.lh"

$type modelName param<string> ;

// Transform for periodic bc's (should this be in FVM.lh?)
$type periodicTransform store<rigid_transform> ;

// EOS related variables
// Ambient Pressure used to define gauge pressure
$type Pambient          param<streamUns::real> ;
// The equation of state object
$type eos               param<fluidPhysics::EOS> ;
// An object that represents the thermodynamic state of a cell
$type eos_state         store<fluidPhysics::EOS::State> ;
// An object that represents the thermodynamic state of a mixture at a cell
$type eos_mixture_state storeVec<streamUns::real> ;
// A hint for the equation of state to speed convergence
$type hint              storeVec<float> ;
$type hint_n            storeVec<float> ;
// Energy of each species 
$type species_energy    storeVec<streamUns::real> ;
// cv of each species
$type species_cv        storeVec<streamUns::real> ;
// Derivative of internal energy with respect to species density (holding P constant)
$type dreidri           storeVec<streamUns::real> ;
// Derivative of internal energy with respect to pressure (holding density constant)
$type dreidP            store<streamUns::real> ;
// cell temperature
$type temperature       store<streamUns::real> ;
// cell density
$type rho               store<streamUns::real> ;
// cell mixture
$type mixture           storeVec<streamUns::real> ;
// cell pressure
$type pressure          store<streamUns::real> ;
// cell speed of sound
$type soundSpeed        store<streamUns::real> ;
// cell cp (and face cp)
$type cp                store<streamUns::real> ;
// internal energy for cells
$type e_internal        store<streamUns::real> ;
// derivative of temperature with respect to primitive variable
$type dTdq              storeVec<streamUns::real> ;
// enthalpy of each species ata cell
$type speciesEnthalpy   storeVec<streamUns::real> ;
// molecular mass of each species
$type speciesMolecularMass param<std::vector<streamUns::real> > ;
// Mixture fraction to use when non given
$type defaultMixtureFraction param<std::vector<streamUns::real> > ;

// Other fluid variables
//
$type gaugePressure     store<streamUns::real> ;
// fluid velocity at a cell
$type u                 store<streamUns::vect3d> ;
// grid velocity at face
$type us_n store<streamUns::real> ;
$type us store<streamUns::vect3d> ;

// Face values
$type gaugePressure_f   store<streamUns::real> ;
$type mixture_f         storeVec<streamUns::real> ;
$type temperature_f     store<streamUns::real> ;
$type rho_f             store<streamUns::real> ;
$type soundSpeed_f      store<streamUns::real> ;
$type u_f               store<streamUns::vect3d> ;

$type boundaryValue(X) store<streamUns::real> ;	
$type boundaryValueP(X,Y) store<streamUns::real> ;	
$type boundaryValuevM(X) storeVec<streamUns::real> ;
$type boundaryValueV3D(X) store<streamUns::vect3d> ; 
$type boundaryState store<EOS::State> ;	
$type boundary_area store<streamUns::real> ;
$type bc_total_area store<streamUns::real> ;
$type bc_total_force store<streamUns::real> ;
$type bc_average_pressure store<streamUns::real> ;

$type flow_direction store<streamUns::vect3d> ;
$type rigid_u store<streamUns::vect3d> ;
$type p0Ref store<streamUns::real> ;
$type T0Ref store<streamUns::real> ;
$type mixtureRef storeVec<streamUns::real> ;
$type massFluxRef store<streamUns::real> ;
$type temperatureRef store<streamUns::real> ;
$type gaugePressureRef store<streamUns::real> ;
$type uRef store<streamUns::vect3d> ;

// Epsilon used by numerical jacobians
$type epsilon param<streamUns::real> ;

// Mean Flow Solver Variables
$type numSpecies        param<int> ;
// Information on the layout of the conservative and primitive vectors
$type qvi               param<conservativeVectorInfo> ;
// primitive solution vector
$type qp                storeVec<streamUns::real> ;
// conservative solution vector
$type q                 storeVec<streamUns::real> ;
// change in primitive variables in newton step
$type dq                storeVec<streamUns::real> ;
// All non-temporal terms including source terms, inviscid, and viscous fluxes.
$type src               storeVec<streamUns::real> ;
// time dependent residual (right hand side of linear system equations)
$type rhs               storeVec<streamUns::real> ;
// inviscid flux
$type qf                storeVec<streamUns::real>; // inviscid flux
// coefficients defining inviscid flux for scalar transport
$type scalar_l          store<streamUns::real> ;
$type scalar_r          store<streamUns::real> ;
// Preconditioning functions
$type preconditioning param<streamUns::preconditioning_method> ;
$type pc_param param<streamUns::preconditioning_param> ;	
$type Beta store<streamUns::real> ;

// Initial condition support
$type q_ic               storeVec<streamUns::real> ;
$type pg_ic              store<streamUns::real> ;
$type pg                 store<streamUns::real> ;

// Time integration parameters
$type theta param<streamUns::real> ; 
$type psi param<streamUns::real> ; 

// Viscous flux
$type diff storeVec<streamUns::real> ;
$type diff_f storeVec<streamUns::real> ;

$type vis_flux          storeVec<streamUns::real>; // viscous flux
// Fluid Stress
$type tau               store<streamUns::symmetricTensor> ;

// Chemistry stuff
// Freezing temperature for chemistry
$type Tf                param<streamUns::TemperatureValue> ;
// Object that computes reaction rates
$type reactor           param<fluidPhysics::reaction> ;
// reaction rates and their derivatives
$type rates             storeVec<fluidPhysics::reaction::rates> ;

// Mean Flow Jacobian
// Diagnal jacobian term
$type pc_srcJ           storeMat<streamUns::real_fj> ; 
// flux jacobians from left side
$type pc_fjp            storeMat<streamUns::real_fj> ;
// flux jacobians from right side
$type pc_fjm            storeMat<streamUns::real_fj> ;
// fluid linear system
$type fluid_B           storeVec<streamUns::real_fj> ;
$type fluid_D           storeMat<streamUns::real_fj> ;
$type fluid_L           storeMat<streamUns::real_fj> ;
$type fluid_U           storeMat<streamUns::real_fj> ;
$type fluid_D_inv       storeMat<streamUns::real_fj> ;
$type fluid_pivot storeVec<pivot_type> ;

// Boundary Condition Parameters
$type Uwall_BC          store<streamUns::vect3d> ;
$type T_BC              store<streamUns::real> ;
$type T0_BC             store<streamUns::real> ;
$type p0_BC             store<streamUns::real> ;
$type rho_BC            store<streamUns::real> ;
$type Twall_BC          store<streamUns::real> ;
$type mixture_BC        storeVec<streamUns::real> ;
$type massFlux_BC       store<streamUns::real> ;
$type mdot_BC           store<streamUns::real> ;
$type swirlAngle_BC     store<streamUns::real> ;
$type swirlCenter_BC    store<streamUns::vect3d> ;
$type momentCenter_BC   store<streamUns::vect3d> ;
$type M_BC              store<streamUns::vect3d> ;
$type u_BC              store<streamUns::vect3d> ;
$type p_BC store<streamUns::real> ;
$type BC_inflow_type store<int> ;
$type temperatureRef_BC store<streamUns::real> ;
$type gaugePressureRef_BC store<streamUns::real> ;
$type mixtureRef_BC storeVec<streamUns::real> ;
$type uRef_BC store<streamUns::vect3d> ;

$type angVel_BC store<streamUns::vect3d> ;
$type rotAxis_BC store<streamUns::vect3d> ;
$type rotCenter_BC store<streamUns::vect3d> ;
$type swirlAxis_BC store<streamUns::vect3d> ;
$type flowDir_BC store<streamUns::vect3d> ;

$type Twall store<streamUns::real> ;
$type Twall_prescribed store<streamUns::real> ;
$type T_interface store<streamUns::real> ;
$type wallVelocity store<streamUns::vect3d> ;

$type sst_k_bc store<streamUns::real> ;
$type sst_w_bc store<streamUns::real> ;
$type prescribe_turb_ref store<vec<2> > ;
$type lam_tau_w store<streamUns::real> ;

// Wall law parameters
$type wall_law param<streamUns::wall_func_param>  ;
$type tau_wall store<streamUns::vect3d> ;
$type q_wall store<streamUns::real> ;
$type wall_law_k store<streamUns::real> ;
$type wall_law_w store<streamUns::real> ;
$type temp_wlaw store<streamUns::real> ;
$type mixture_f_wlaw storeVec<streamUns::real> ;
$type nonAdiabaticWall store<bool>  ;
$type press_wlaw store<streamUns::real> ;
$type wall_law_nut store<streamUns::real>  ;
$type wall_cells store<bool> ;

$type hflux store<streamUns::real> ;



$type stime             param<streamUns::real> ; // simulation time
$type ncycle            param<int> ; // simulation iteration number

$type newton_iter       param<int> ;  // Timestepping controls
$type urelax            param<streamUns::real> ;
$type dtmax             param<streamUns::TimeValue> ;
$type cflmax            param<streamUns::real> ;
$type cfl               param<std::pair<double,double> > ;

$type max_ev            store<streamUns::real> ;
// preconditioning timestep
$type dtau              store<streamUns::real> ;
// physical timestep
$type dt                store<streamUns::real> ;
// non-linear limited timestep
$type dt_urelax         store<streamUns::real> ;
// local timestep
$type dtmin             store<streamUns::real> ;
// delta t/volume
$type dtvol             store<streamUns::real> ;

// Generic transport
$type muu(T,P,MIXTURE)   store<streamUns::real> ;
$type kconduct(T,P,MIXTURE) store<streamUns::real> ;

// Specific transport for cells and faces
// viscosity
$type muu                store<streamUns::real> ;
$type muu_f              store<streamUns::real> ;

// conductivity
$type kconduct           store<streamUns::real> ;
$type kconduct_f         store<streamUns::real> ;

// General Turbulence Model
// Map from cell to nearest viscous wall
$type min_cell2noslip    Map ;

$type divu store<streamUns::real> ;
// vorticity
$type vortMag            store<streamUns::real> ;
$type vort               store<streamUns::vect3d> ;
$type vort_f             store<streamUns::vect3d> ;

// helicity
$type helicity           store<streamUns::real> ;
$type helicity_f         store<streamUns::real> ;

// distance to nearest viscous wall
$type dist_noslip        store<streamUns::real> ;
$type dist_noslip_f      store<streamUns::real> ;
// turbulent viscousity
$type tmuu               store<streamUns::real> ;
$type tmuu_f             store<streamUns::real> ;

// Spalart Allmaras Variables
$type spalart param<Spa_All_param> ;

// conservative integrated variable
$type rho_nu_t          store<streamUns::real> ;
// turbulent kinematic viscosity
$type nu_t              store<streamUns::real> ;
$type nu_t_f            store<streamUns::real> ;
// Chi coefficeint for SA model
$type xcoeff            store<streamUns::real> ;
// SA model coefficeitns
$type fv1               store<streamUns::real> ;
$type fv1_f             store<streamUns::real> ;
$type fv2               store<streamUns::real> ;
$type S_tilda           store<streamUns::real> ;
$type rcoeff            store<streamUns::real> ;
$type rpcoeff           store<streamUns::real> ;
$type gcoeff            store<streamUns::real> ;
$type gpcoeff           store<streamUns::real> ;
$type fw                store<streamUns::real> ;
$type fwp               store<streamUns::real> ;
$type cw1               store<streamUns::real> ;
// convection, diffusion, and source terms
$type SA_src            store<streamUns::real> ;
// turmbulent destruction
$type SA_destruct       store<streamUns::real> ;
// flux jacobians
$type SA_fjm            store<streamUns::real> ;
$type SA_fjp            store<streamUns::real> ;
// diagonal jacobian term
$type SA_srcJ           store<streamUns::real> ;
// right hand side of newton method
$type SA_rhs            store<streamUns::real> ;
// SA matrix
$type SA_B              store<streamUns::real> ;
$type SA_dq             store<streamUns::real> ;
$type SA_L              store<streamUns::real> ;
$type SA_D              store<streamUns::real> ;
$type SA_U              store<streamUns::real> ;
$type SA_qi             store<streamUns::real> ;

// Realizable k-epsilon model
$type rke_q             store<streamUns::vec<2> > ;
$type rke_src           store<streamUns::vec<2> > ;
$type rke_rhs           store<streamUns::vec<2> > ;
// diagonal of jacobian
$type rke_srcJ          storeMat<streamUns::real_fj> ;
// flux jacobian terms
$type rke_fjp           storeMat<streamUns::real_fj> ;
$type rke_fjm           storeMat<streamUns::real_fj> ;
// system matrix for RKE model
$type rke_B             storeVec<streamUns::real_fj> ;
$type rke_D             storeMat<streamUns::real_fj> ;
$type rke_L             storeMat<streamUns::real_fj> ;
$type rke_U             storeMat<streamUns::real_fj> ;
$type e                 store<streamUns::real> ;
$type e_f               store<streamUns::real> ;
$type diff_e            store<streamUns::real> ;


// K-omega turbulence models
// Conservative variables (rk, rw)
$type sst_q             store<streamUns::vec<2> > ;
$type sst_qi            store<streamUns::vec<2> > ;
$type sst_dq            storeVec<streamUns::real> ;
// turbulent kinetic energy
$type k                 store<streamUns::real> ;
$type k_f               store<streamUns::real> ;
// omega (enstrophy)
$type w                 store<streamUns::real> ;
$type w_f               store<streamUns::real> ;
// SST blending functions
$type bF1               store<streamUns::real> ;
$type bF2               store<streamUns::real> ;
$type fBetaS            store<streamUns::real> ;
$type fBeta             store<streamUns::real> ;
// Sigmas
$type sigma_k           store<streamUns::real> ;
$type sigmak_f          store<streamUns::real> ;
$type sigmae_f          store<streamUns::real> ;
// SST turbulence model parameters
$type sst               store<streamUns::sst_param> ;
$type sst1 param<sst1_param> ;
$type sst2 param<sst2_param> ;
// tke diffusion flux
$type diff_t            store<streamUns::real> ;
// omega diffusion flux
$type diff_w            store<streamUns::real> ;
//strain
$type strainRate        store<streamUns::real> ;
$type stress_scalar     store<streamUns::real> ;
// turbulent production
$type P_k               store<streamUns::real> ;

// Source terms for k-omega model
$type sst_src           store<streamUns::vec<2> > ;
// right hand side of newton, includes time derivative terms
$type sst_rhs           store<streamUns::vec<2> > ;

// diagonal of jacobian
$type sst_srcJ          storeMat<streamUns::real_fj> ;
// flux jacobian terms
$type sst_fjp           storeMat<streamUns::real_fj> ;
$type sst_fjm           storeMat<streamUns::real_fj> ;
// system matrix for SST model
$type sst_B             storeVec<streamUns::real_fj> ;
$type sst_D             storeMat<streamUns::real_fj> ;
$type sst_L             storeMat<streamUns::real_fj> ;
$type sst_U             storeMat<streamUns::real_fj> ;


$type plot_modulo param<int> ;

$type restart_freq param<int> ;
$type restart_modulo param<int> ;
$type restart_directory param<string> ;
$type restart_postfix param<string> ;

$type stop_iter param<int> ;
$type plot_freq param<int> ;
$type print_freq param<int> ;
$type time_integration param<std::string> ;
$type pseudo_cflmax param<double> ;
$type gauss_seidel_iter param<int> ;

$type heatf store<streamUns::real> ;
$type wall_stress store<streamUns::vect3d> ;
$type wall_p store<streamUns::real> ;
$type wall_T store<streamUns::real> ;
$type yplus_w store<streamUns::real> ;
