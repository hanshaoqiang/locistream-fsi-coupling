// Grid motion algorithm for PISO. Statements that do not appear inside
// an "if" block apply to all situations. There are two grid-movement
// scenarios:

  1) rigidBodyGridMotion: The entire grid moves in a rigid-body manner.

  2) pdeSolverTimeDependent: Boundaries of the domain move in a time-dependent
     manner. Thus, node position changes only occur at the time level {n}.

  // Get the node positions of the reference configuration from the grid file.
  pos=f(gridFileName) ;

  // Initialize the node displacements. For rigid-body rotation, we can
  // move the entire grid to a starting location. For deforming mesh
  // problems, the reference configuration in the vog file is the initial
  // configuration, so we initialize all node displacements to zero.
  if(rigidBodyGridMotion){
    node_s_ic=f(input parameters) ;
  }else{
    node_s_ic=0.0 ;
  }

  // Initialize the node positions, face center positions, face area and
  // cell volume.
  pos_ic=f(pos,node_s_ic) ; facecenter_ic=f(pos_ic) ;
  area_ic=f(pos_ic,facecenter_ic) ;
  vol_ic=gclVolume(pos_ic,facecenter_ic,area_ic) ;

  // Initialize the timestep. Note that the rules with {n=-1} are only used if
  // we have BDF2. In addition, since we start with BDF on the first timestep,
  // the initial conditions that are assigned here for {n=-1} are not used.
  // For volume, we do not have a rule for vol{n=0} since vol is computed at
  // {n} and {n,it} with an iteration-independent rule.
  pos{n=-1}=pos{n=0}=pos_ic ; vol{n=-1}=vol_ic ;
  node_s{n=0}=node_s_ic ;

  // Time loop. At timestep "n" we are really solving for the updated
  // variables at "n+1". So the {n} values represent the values at the
  // end of the last timestep and {n-1} values the timestep before that.
  for(int n=0;n<nMax;++n){

    // Available variables from two timesteps ago.
    if(BDF2) pos{n-1},vol{n-1} ;

    // Available variables from the end of the last timestep.
    node_s{n},pos{n} ;

    // Compute geometric quantities.
    facecenter{n}=f(pos{n} ; cellcenter{n}=f(facecenter{n} ;
    area{n}=f(pos{n},facecenter{n}) ;
    vol{n}=f(pos{n},area{n},facecenter{n}) ;

    // Solve for the new node displacement and position.
    if(rigidBodyGridMotion){
      node_sStar{n}=f(input parameters,timeStep) ;
    }else if(pdeSolver && gridMotionTimeDependent){

      // Compute boundary node displacments for time-dependent boundaries.
      // These represent the new values at {n+1}.
      node_s_b{n}=f(input parameters) ;
 
      node_sStar{n,itg=0}=node_s{n} ;
      for(int itg=0;itg<itgMax;++itg){

        // Current state.
        node_sStar{n,itg} ;

        // Assemble linear elasticity PDE based on {n} level values
        // of geometry.

        // Solve linear elasticity PDE for new displacement.
        sStar{n,itg}=f(sStar_D{n},sStar_E{n},sStar_B{n,itg}) ;

        // Advance node displacement.
        node_sStar{n,itg+1}=sStar{n,itg} ;
      }

      // New displacment collapses out of the iteration.
      node_sStar{n}=node_sStar{n,itgMax} ;
    }

    // Update the node positions.
    if(gridMotionTimeDependent) posStar{n}=f(pos,node_sStar{n}) ;

    // Compute old facet sums for GCL.
    if(BDF2){
      node_vOld{n}=f(pos{n-1},pos{n},timeStep) ;
      facetNormalSumOld{n},facetVDotNormalSumOld{n}=f(node_vOld{n},
        pos{n-1},pos{n},facecenter{n},facecenterOld{n}) ;
    }

    // Compute the facet normal sums. These two rules are different from their
    // counterparts in the iterative SIMPLE algorithm.
    node_v{n}=f(posStar{n},pos{n}) ;
    facetNormalSum{n},facetVDotNormalSum{n}=f(node_v{n},pos{n},posStar{n},
      facecenter{n}) ;

    // Solve PISO predictor equations for fluid. Note that the implicit part
    // of the temporal source term is using vol{n} at the current time, which
    // is only good for non-deforming meshes, since the new volume that would
    // be obtained from posStar{n} is the same as vol{n}. Will have to fix
    // this whenever we get to deforming meshes with PISO.

    // Must track pos through the stage loop so that "pos{n,it} will represent
    // the updated nodal positions. Otherwise, pos{n} would just promote to
    // {n,it} and we would be left with old time values.
    if(gridMotionTimeDependent){
      pos{n,it=0}=posStar{n} ;
    }

    // Corrector stage loop.
    for(int it=0;it<itMax;++it){

      // New geometric information available once we have new positions.
      facecenter{n,it}=f(pos{n,it} ; cellcenter{n,it}=f(facecenter{n,it} ;
      area{n,it}=f(pos{n,it},facecenter{n,it}) ;
      vol{n,it}=f(pos{n,it},area{n,it},facecenter{n,it}) ;

      // Solve PISO corrector equations for fluid.

      // Advance the node positions.
      if(gridMotionTimeDependent){
        pos{n,it+1}=pos{n,it} ;
      }
    }

    // Iteration collapse/Time advance.
    if(gridMotionTimeDependent){
      pos{n+1}=pos{n,itMax-1} ; node_s{n+1}=node_sStar{n} ;
    }
  }







